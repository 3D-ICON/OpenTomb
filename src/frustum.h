
#ifndef FRUSTUM_H
#define FRUSTUM_H

#include <stdint.h>
#include "core/vmath.h"

struct room_s;
struct portal_s;
struct camera_s;
struct obb_s;

typedef struct frustum_s
{
    uint16_t            vertex_count;                                           // frustum vertices count (are equal to clip planes count)

    float              *planes;                                                 // clip planes
    float              *vertex;                                                 // frustum vertices
    float              *cam_pos;                                                ///@TODO: delete it!
    float               norm[4];                                                // main frustum clip plane (inv. plane of parent portal)

    uint16_t            parents_count;
    struct frustum_s   *parent;                                                 // by who frustum was generated; parent == NULL is equal generated by camera
    struct frustum_s   *next;                                                   // next frustum in list
}frustum_t, *frustum_p;


class CFrustumManager
{
public:
    CFrustumManager(uint32_t buffer_size);
   ~CFrustumManager();
    
    void Reset();
    frustum_p CreateFrustum();
    frustum_p PortalFrustumIntersect(struct portal_s *portal, frustum_p emitter, struct camera_s *cam);         // Основная функция для работы с порталами.

private:
    float *Alloc(uint32_t size);
    void SplitPrepare(frustum_p frustum, struct portal_s *p, frustum_p emitter);// подготовка фрустума к сплиту
    void GenClipPlanes(frustum_p p, struct camera_s *cam);                      // генерация плоскостей отсечения
    int SplitByPlane(frustum_p p, float n[4], float *buf);                      // отсечение части портала плоскостью
    
    bool m_need_realloc;
    uint32_t m_buffer_size;
    uint32_t m_allocated;
    uint8_t *m_buffer;
};

/**
 * Draws wireframe of this frustum.
 *
 * Expected state:
 *  - Vertex array is enabled, color, tex coord, normal disabled
 *  - No vertex buffer object is bound
 *  - Texturing is disabled
 *  - Alpha test is disabled
 *  - Blending is enabled
 *  - Lighting is disabled
 *  - Line width is set to desired width (typically 3.0)
 *  - Current color set to desired color (typically red)
 * Ignored state:
 *  - Currently bound texture.
 *  - Currently bound element buffer.
 *  - Vertex pointer (changes it)
 * Changed state:
 *  - Current position will be arbitrary.
 *  - Vertex pointer will be arbitray.
 */

int Frustum_GetFrustumsCount(struct frustum_s *f);
int Frustum_HaveParent(frustum_p parent, frustum_p frustum);
int Frustum_IsPolyVisible(struct polygon_s *p, struct frustum_s *frustum);
int Frustum_IsAABBVisible(float bbmin[3], float bbmax[3], struct frustum_s *frustum);
int Frustum_IsOBBVisible(struct obb_s *obb, struct frustum_s *frustum);
int Frustum_IsOBBVisibleInRoom(struct obb_s *obb, struct room_s *room);

#endif
