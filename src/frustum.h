
#ifndef FRUSTUM_H
#define FRUSTUM_H

#include <cstdint>
#include <memory>
#include <vector>
#include <bullet/LinearMath/btScalar.h>
#include "vmath.h"

struct Room;
struct portal_s;
struct render_s;
struct obb_s;

typedef struct frustum_s
{
    std::vector<btVector3> planes;                                                 // clip planes
    std::vector<btVector3> vertices;                                                 // frustum vertices
    btVector3* cam_pos;                                                ///@TODO: delete it!
    btVector3  norm;                                                // main frustum clip plane (inv. plane of parent portal)

    uint16_t            parents_count;
    struct frustum_s   *parent;                                                 // by who frustum was generated; parent == NULL is equal generated by camera
    struct frustum_s   *next;                                                   // next frustum in list
}frustum_t, *frustum_p;

struct Camera;

class frustumManager
{
public:
    frustum_p createFrustum();
    frustum_p portalFrustumIntersect(portal_s* portal, frustum_p emitter, struct render_s *render);         // Основная функция для работы с порталами.

private:
    void splitPrepare(frustum_p frustum, struct portal_s *p, frustum_p emitter);// подготовка фрустума к сплиту
    void genClipPlanes(frustum_p p, Camera* cam);                      // генерация плоскостей отсечения
    int split_by_plane(frustum_p p, const btVector3 &n, std::vector<btVector3> *buf);              // отсечение части портала плоскостью
};


extern frustumManager engine_frustumManager;


/**
 * Draws wireframe of this frustum.
 *
 * Expected state:
 *  - Vertex array is enabled, color, tex coord, normal disabled
 *  - No vertex buffer object is bound
 *  - Texturing is disabled
 *  - Alpha test is disabled
 *  - Blending is enabled
 *  - Lighting is disabled
 *  - Line width is set to desired width (typically 3.0)
 *  - Current color set to desired color (typically red)
 * Ignored state:
 *  - Currently bound texture.
 *  - Currently bound element buffer.
 *  - Vertex pointer (changes it)
 * Changed state:
 *  - Current position will be arbitrary.
 *  - Vertex pointer will be arbitray.
 */

int Frustum_GetFrustumsCount(struct frustum_s *f);
int Frustum_HaveParent(frustum_p parent, frustum_p frustum);
bool Frustum_IsPolyVisible(struct polygon_s *p, struct frustum_s *frustum);
bool Frustum_IsAABBVisible(const btVector3 &bbmin, const btVector3 &bbmax, struct frustum_s *frustum);
bool Frustum_IsOBBVisible(struct obb_s *obb, struct frustum_s *frustum);
bool Frustum_IsOBBVisibleInRoom(struct obb_s *obb, std::shared_ptr<Room> room);

#endif
