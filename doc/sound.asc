Sound
-----

Overview
~~~~~~~~

The Tomb Raider series makes abundant use of sound, which appears in a variety of contexts. Sounds can be either continuous or triggered. Continuous ones can be
for the whole level or produced by some sound-source object. The whole-level sound is a CD-track sound, which is played continuously, thus the blowing-wind
sounds in the underground parts of ``The Great Wall''. Sound-source objects make sound in a range around some specific point. Likewise, triggered ones can be
triggered by a variety of events. The triggering can be hardcoded in the engine (gunshots, switch pulls) or by reaching some animation frame (footsteps, Lara's
somewhat unladylike sounds). Switch pulls and/or door sounds may be specified with operand of `FDFunction 0x09`; operand values lower than those used for
assault-course clock control may specify which sounds to use.

Though CD-track sounds are referred to by track index, game-data sounds are referred to by an internal sound index; this is translated into which sound sample
with the help of three layers of indexing, to allow for a suitable degree of abstraction. Internal sound indices for various sounds appear to be consistent
across all the level files in a game; a gunshot or a passport opening in one level file will have the same internal sound index as in all the others. The
highest level of these is the `SoundMap[]` array, which translates the internal sound index into an index into `SoundDetails[]`. Each `SoundDetails` record
contains such details as the sound intensity, how many samples to select from, and an index into `SampleIndices[]`. This allows for selecting among multiple
samples to produce variety; that index is the index to the `SampleIndices[]` value of first of these, with the rest of them being having the next indices in
series of that array. Thus, if the number of samples is 4, then the TR engine looks in `SampleIndices[]` locations _Index_, _Index+1_, _Index+2_, and _Index+3_.
Finally, the `SampleIndices[]` array references some arrays of sound samples. In TR1, these samples are embedded in the level files, and `SampleIndices[]`
contains the displacements of each one in bytes from the beginning of that embedded block. In TR2 and TR3, these samples are concatenated in the file `MAIN.SFX`
with no additional information; `SampleIndices[]` contains sequence numbers (0, 1, 2, 3, ...) in `MAIN.SFX`. Finally, the samples themselves are all in
Microsoft WAVE format.

The CD-audio tracks are stored in different fashions in the various versions of the TR series. [green]#In the PC version of TR3, they are all stored in the file
`CDAUDIO.WAD`, which has the format (source: Sven, BachmannS@gmx.net, http://wotsit.org/cgi-bin/download.cgi?tr3audio): a series of header records with this
format:#

[source,cpp]
----
{
    // 0x108 bytes
    int32_t SampleLength;     // how many bytes
    int32_t SampleOffset;     // offset in file
    int8_t Name[256];         // C string; the length is a guess, because Sven's sizes are inconsistent.
};
----
[green]#followed by embedded samples in the Microsoft WAVE format.#

In the Macintosh versions of TR1 and TR2, the CD audio tracks are separate files in AIFF format, while in the Macintosh version of TR3, these tracks are
separate files in Microsoft WAVE format. The Macintosh version of TR3 contains an additional file, `CDAudio.db`, which contains the names of all the track files
as 32-byte zero-padded C strings with no extra contents.

Data Structures
~~~~~~~~~~~~~~~

This structure contains the details of continuous-sound sources. Although a SoundSource object has a position, it has no room membership; the sound seems to
propagate omnidirectionally for about 10 horizontal-grid sizes without regard for the presence of walls.

[source,cpp]
----
struct tr2_sound_source
{
    int32_t x;     // absolute X position of sound source (world coordinates)
    int32_t y;     // absolute Y position of sound source (world coordinates)
    int32_t z;     // absolute Z position of sound source (world coordinates)
    uint16_t SoundID; // internal sound index
    uint16_t Flags; // 0x40, 0x80, or 0xc0
};
----

`SoundMap` is for mapping from internal-sound index to `SoundDetails` index; it is 370 `int16_t` in TR2 and TR3 and [red]#256 `int16_t` in TR1#. A value of `-1`
indicates ``none''.

[source,cpp]
----
/*
 * Sound-sample details (SoundDetails)
 */
struct tr2_sound_details
{
    // 8 bytes
    int16_t Sample; // (index into SampleIndices)
    int16_t Volume;
    int16_t SkipProbability; // If !=0 and ((rand()&0x7fff) > SkipProbability), this sound is not played
    int16_t Characteristics; // Bits 2-7: number of sound
                             // samples in this group, Bits 0-1: channel number?
    // if Characteristics&0x8000: ???
    // if Characteristics&0x4000: play with Volume - ((rand()&0x7fff)>>3)
    // if Characteristics&0x2000: ???
    // if Characteristics&0x2000: ???
    // if Characteristics&0x1000: ???
    // if Characteristics&0x0ff0: ???
    // if ((Characteristics>>2)&0x0c) > 1: play (Sample + ((((Characteristics>>2)&0x0f) * (rand()&0x7fff))>>15))
};
----

SampleIndices
~~~~~~~~~~~~~

[red]#In TR1, this is a list of indices into the embedded sound-samples object, which precedes this object in the level file.# In TR2 and TR3, this is a list of
indices into the file `MAIN.SFX`; the indices are the index numbers of that file's embedded sound samples, rather than the samples' starting locations. That
file itself is a set of concatenated soundfiles with no catalogue info present. In all the TR series, the sound format used is Microsoft WAVE.
