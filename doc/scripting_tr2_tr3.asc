Scripting in TR2/TR3 for PC/PSX
-------------------------------

Overview
~~~~~~~~

The internal gameflow, which levels come in what order, what item(s) Lara has at the beginning of each level, the filenames of the level and cut-scene files,
all the visible text (e.g. ``Save Game,'' ``Rusty Key,'' etc.), and various other options are controlled by a script file called `TOMBPC.DAT`/`TOMBPSX.DAT`. The
scripts were compiled using a utility known as `GAMEFLOW.EXE` which was distributed by Eidos in the German release of Tomb Raider II Gold. Both TR2 and TR3 use
these script files. From both games the format remained unchanged. TR1's gameflow is hardcoded thus there is no external file controlling this resulting in loss
of flexibility.

[source,cpp]
----
uint32_t Version;             // The Script Version (Always 3 for TR2/3)
uint8_t Description[256];     // Null-terminated string describing the script copyright info etc. Not encrypted.
uint16_t GameflowSize;        // Size in bytes of the game flow data, always 128 bytes
uint32_t FirstOption;         // What to do when the game starts
uint32_t TitleReplace;        // What to do when EXIT_TO_TITLE is requested
uint32_t OnDeathDemoMode;     // What to do when Lara dies during the demo mode
uint32_t OnDeathInGame;       // What to do when Lara dies during the game
uint32_t DemoTime;            // Time in game ticks (1/30th of a second?) to wait before starting a demo
uint32_t OnDemoInterrupt;     // What to do when the demo mode is interrupted
uint32_t OnDemoEnd;           // What to do when the demo mode ends
uint8_t Unknown1[36];         // Filler
uint16_t NumLevels;           // Number of levels in the game, including the training level, not including the title level.
uint16_t NumChapterScreens;   // Chapter screens (Present in TR2, first used in TR3)
uint16_t NumTitles;           // Number of title elements (TITLE.TR2 level + the legal/title pictures in *.PCX format)
uint16_t NumFMVs;             // Number of FMV cutscenes PC - (*.RPL), PSX - (*STR)
uint16_t NumCutscenes;        // Number of in-game (engine-rendered) cutscenes (CUT*.TR2)
uint16_t NumDemoLevels;       // Number of demo levels
uint16_t TitleSoundID;        // ID of title soundtrack
uint16_t SingleLevel;         // If doing only a single level, the level ID (starting at 1). -1 means disabled.
uint8_t Unknown2[32];         // Filler
uint16_t Flags;               // Various flags, see below
uint8_t Unknown3[6];          // Filler
uint8_t XORKey;               // Key used to encrypt/decrypt strings
uint8_t LanguageID;           // Script Language ID, see below
uint16_t SecretSoundID;       // ID of soundtrack to play when a secret is found
uint8_t Unknown4[4];          // Filler

// 1. Offset to each string is end offset of *StringOffsets' + *StringOffsets[i]
// 2. String length is calculated by (*StringOffsets[i+1]-*StringOffsets[i])
// 3. If Flags & UseXor true each character (except null-terminator) must be ^ XorKey to decrypt the string.

uint16_t LevelStringOffsets[NumLevels+1];                 // Relative offset to level name strings
StringArray LevelStrings[NumLevels];                      // Usually Encrypted
uint16_t ChapterScreenStringOffsets[NumChapterScreens+1]; // Relative offset to chapter screen strings
StringArray ChapterScreenStrings[NumChapterScreens];      // Usually Encrypted
uint16_t TitleStringOffsets[NumTitles+1];                 // Relative offset to title strings
StringArray TitleStrings[NumTitles];                      // Usually Encrypted
uint16_t FMVStringOffsets[NumFMVs+1];                     // Relative offset to fmv path strings
StringArray FMVStrings[NumFMVs];                          // Usually Encrypted
uint16_t LevelPathStringOffsets[NumLevels+1];             // Relative offset to level path strings
StringArray LevelPathStrings[NumLevels];                  // Usually Encrypted
uint16_t CutscenePathStringOffsets[NumCutscenes+1];       // Relative offset to cutscene path strings
StringArray CutscenePathStrings[NumCutscenes];            // Usually Encrypted

uint16_t SequenceOffsets[NumLevels + 1]; // Relative offset to sequence info (the +1 is because the first one is the FrontEnd sequence, for when the game starts)
uint16_t SequenceNumBytes; // Size of SequenceOffsets in bytes
SequenceInfo Sequences[NumLevels + 1];   // Sequence info see explanation below (SIZE is dependant on first opcode)

uint16_t DemoLevelIDs[NumDemoLevels];

#if PSX //PSX Only
    PSXFMVInfo[NumFMVs];
#endif

uint16_t NumGameStrings;
uint16_t GameStringOffsets[NumGameStrings+1];   // Relative offset to game strings
StringArray GameStrings[NumGameStrings];        // Usually Encrypted

#if PSX // If PSX
    uint16_t PSXStringOffsets[size + 1]; // size is 79 for the TR2 beta, 80 for all other versions
    StringArray PSXStrings[size];
#else // PC
    uint16_t PCStringOffsets[41 + 1];
    StringArray PCStrings[41];
#endif

uint16_t Puzzle1StringOffsets[NumLevels+1]; // Relative offset to puzzle1 strings
StringArray Puzzle1Strings[NumLevels];      // Usually Encrypted
 
uint16_t Puzzle2StringOffsets[NumLevels+1]; // Relative offset to puzzle2 strings
StringArray Puzzle2Strings[NumLevels];      // Usually Encrypted
 
uint16_t Puzzle3StringOffsets[NumLevels+1]; // Relative offset to puzzle3 strings
StringArray Puzzle3Strings[NumLevels];      // Usually Encrypted
 
uint16_t Puzzle4StringOffsets[NumLevels+1]; // Relative offset to puzzle4 strings
StringArray Puzzle4Strings[NumLevels];      // Usually Encrypted
 
uint16_t Pickup1StringOffsets[NumLevels+1]; // Relative offset to pickup1 strings
StringArray Pickup1Strings[NumLevels];      // Usually Encrypted
 
uint16_t Pickup2StringOffsets[NumLevels+1]; // Relative offset to pickup2 strings
StringArray Pickup2Strings[NumLevels];      // Usually Encrypted
 
uint16_t Key1StringOffsets[NumLevels+1];    // Relative offset to key1 strings
StringArray Key1Strings[NumLevels];         // Usually Encrypted
 
uint16_t Key2StringOffsets[NumLevels+1];    // Relative offset to key2 strings
StringArray Key2Strings[NumLevels];         // Usually Encrypted
 
uint16_t Key3StringOffsets[NumLevels+1];    // Relative offset to key3 strings
StringArray Key3Strings[NumLevels];         // Usually Encrypted
 
uint16_t Key4StringOffsets[NumLevels+1];    // Relative offset to key4 strings
StringArray Key4Strings[NumLevels];         // Usually Encrypted
----

PSX FMV Info
~~~~~~~~~~~~

[source,cpp]
----
struct PSXFMVInfo
{
    uint32_t Start;     // Start frame
    uint32_t End;       // End frame
};
----

This specific info is exclusive to `TOMBPSX.DAT`.

Script Flags
~~~~~~~~~~~~

[source,cpp]
----
enum ScriptFlags
{
    DemoVersion =              (1 << 0),  // If set, it indicates that the game is a demo distribution.
    TitleDisabled =            (1 << 1),  // If set, it indicates that the game has no Title Screen.
    CheatModeCheckDisabled =   (1 << 2),  // If set, it indicates that the game does not look for the cheat sequence keystrokes and events. 
    NoInputTimeout =           (1 << 3),  // If set, it indicates that the game waits forever if there is no input (won't enter demo mode).
    LoadSaveDisabled =         (1 << 4),  // If set, it indicates that the game does not allow save games.
    ScreenSizingDisabled =     (1 << 5),  // If set, it indicates that the game does not allow screen resizing (with the function keys).
    LockoutOptionRing =        (1 << 6),  // If set, it indicates that the user has no access to the Option Ring while playing the game. 
    DozyCheatEnabled =         (1 << 7),  // If set, it indicates that the game has the DOZY cheat enabled (not present in final versions). 
    UseXor =                   (1 << 8),  // If set, it indicates that a cypher byte was used to encrypt the strings in the script file, and is stored in the XorKey field. 
    GymEnabled =               (1 << 9),  // Is Gym available on title screen.
    SelectAnyLevel =           (1 << 10), // If set, it indicates that the names of the levels are all listed in the Passport. 
    EnableCheatCode =          (1 << 11)  // It apparently has no effect on the PC game.
};
----

These flags enable various in-game features if set.

Script Language
~~~~~~~~~~~~~~~

[source,cpp]
----
enum ScriptLanguage
{
    LANG_ENGLISH = 0,
    LANG_FRENCH = 1,
    LANG_GERMAN = 2,
    LANG_AMERICAN = 3,
    LANG_JAPANESE = 4
};
----

Script Sequencing & Opcodes/Operands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each script has ``sequence information'', Opcodes and Operands are all stored as `uint16_t`. Sequences contain a set of commands to execute where an additional
value (operand) is usually passed as a parameter to the function the command needs to call. Note: that if a level is a demo level, its level ID will be 1024
higher than a _normal_ level ID.

[source,cpp]
----
struct SequenceInfo
{
    uint16_t Opcode;   //Command
    uint16_t Operand;  //Not always used, depends on the opcode
};

enum ScriptOpcodes
{
    OP_PICTURE = 0,             // Unused. Compiles but does not show in-game. Maybe PSX. Operand is picture ID.
    OP_PSX_START = 1,           // Unused. Does not compile. Maybe PSX. Operand is track ID.
    OP_PSX_FMV = 2,             // Unused. Does not compile. Maybe PSX. Operand is FMV ID.
    OP_FMV = 3,                 // Display Full Motion Video. Operand is FMV ID.
    OP_LEVEL = 4,               // Start a playable level. Operand is level ID.
    OP_CINE = 5,                // Display cut scene sequence. Operand is cutscene ID.
    OP_COMPLETE = 6,            // Display level-completion statistics panel.
    OP_DEMO = 7,                // Display demo sequence. Operand is demo level ID.
    OP_PSX_DEMO = 8,            // Unused. Does not compile. Maybe PSX. Operand is demo level ID.
    OP_END = 9,                 // Closes script sequences, LEVEL, DEMOLEVEL, GYM, etc...
    OP_TRACK = 10,              // Play Soundtrack (it precedes opcodes of associated levels). Operand is track ID.
    OP_SUNSET = 11,             // Unknown. Nothing changes in-game. Used in Bartoli's Hideout. Maybe not-implemented ancestor of TR4 LensFlare?
    OP_LOAD_PIC = 12,           // Show chapter screen (under TR3). Operand is picture ID.
    OP_DEADLY_WATER = 13,       // Unknown. Nothing changes in-game. Used in Temple of Xian. Maybe not-implemented ancestor of TR3 Death_by_Drowning?
    OP_REMOVE_WEAPONS = 14,     // Lara starts the level with no weapons.
    OP_GAMECOMPLETE = 15,       // End of game, shows the final statistics and starts the credits sequence.
    OP_CUTANGLE = 16,           // Matches the North-South orientation of the Room Editor and the North-South orientation of the 3D animated characters from a CAD application. Operand is horizontal rotation (angle in degrees * 65536 / 360)
    OP_NOFLOOR = 17,            // Lara dies when her feet reach the given depth. If falling, 4 to 5 extra blocks are added to Depth. Operand is depth (blocks * 1024), relative to where Lara starts the level.
    OP_STARTINV = 18,           // Give item to lara at level-start or at all-secrets-found (see below). Operand is item ID.
    OP_STARTANIM = 19,          // Lara starts the level with the given animation. Operand is animation ID.
    OP_SECRETS = 20,            // If zero, the level does not account for secrets. Non-zero value means the level must be accounted for secrets.
    OP_KILLTOCOMPLETE = 21,     // Kill all enemies to finish the level.
    OP_REMOVE_AMMO = 22         // Lara starts the level without ammunition or medi packs.
};
----

The correct way to parse Sequence Info is to first read a `uint16_t` opcode specifying what this command within the sequence does. In reference to the list
above, certain commands MUST have an additional `uint16_t` read from the sequence data directly after the opcode that's the pairing operand to this opcode. Not
all opcodes have an operand so this must be done correctly. The original games execute each sequence command 1 by 1 until it reaches `OP_END`, where it
then runs the next sequence.

==== Opcode-18 `OP_STARTINV`

(repeat means give another)

By default, the item is given at level start.
Adding 1000 to the item ID means it will be given when all secrets are found.

.Tomb Raider 2
* 0 -- Pistols
* 1 -- Shotgun
* 2 -- Automatic pistols
* 3 -- Uzis
* 4 -- Harpoon gun
* 5 -- M-16
* 6 -- Grenade launcher
* 7 -- Pistol clip (no effect, infinite by default)
* 8 -- Shotgun-shell box (adds 2 shells)
* 9 -- Automatic-pistol clip (adds 2 shells)
* 10 -- Uzi clip (adds 2 shells)
* 11 -- Harpoon bundle (adds 2 harpoons)
* 12 -- M-16 clip (add 2 shells)
* 13 -- Grenade pack (adds 1 grenade)
* 14 -- Flare box (adds 1 flare)
* 15 -- Small medipack (adds 1 pack)
* 16 -- Big medipack (adds 1 pack)
* 17 -- Pickup 1
* 18 -- Pickup 2
* 19 -- Puzzle 1
* 20 -- Puzzle 2
* 21 -- Puzzle 3
* 22 -- Puzzle 4
* 23 -- Key 1
* 24 -- Key 2
* 25 -- Key 3
* 26 -- Key 4

.Tomb Raider 3
* 0  -- Pistols
* 1  -- Shotgun
* 2  -- Desert Eagle
* 3  -- Uzis
* 4  -- Harpoon gun
* 5  -- MP5
* 6  -- Rocket launcher
* 7  -- Grenade launcher
* 8  -- Pistol clip (no effect, infinite by default)
* 9  -- Shotgun-shell box (adds 2 shells)
* 10 -- Desert eagle clip (adds 5 shells)
* 11 -- Uzi clip (adds 2 shells)
* 12 -- Harpoon bundle (adds 2 harpoons)
* 13 -- MP5 clip (add 2 shells)
* 14 -- Rocket pack (adds 1 rocket)
* 15 -- Grenade pack (adds 1 grenade)
* 16 -- Flare box (adds 1 flare)
* 17 -- Small medipack (adds 1 pack)
* 18 -- Big medipack (adds 1 pack)
* 19 -- Pickup 1
* 20 -- Pickup 2
* 21 -- Puzzle 1
* 22 -- Puzzle 2
* 23 -- Puzzle 3
* 24 -- Puzzle 4
* 25 -- Key 1
* 26 -- Key 2
* 27 -- Key 3
* 28 -- Key 4
* 29 -- Save crystal


Tomb Raider 2 Identifications
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

NOTE: [blue]#TR2 only information here. These lists are virtually colored blue.#

.FMV IDs
* 0 -- LOGO (everybody's corporate logos)
* 1 -- ANCIENT (monks vs. dragon)
* 2 -- MODERN (Lara drops in from helicopter)
* 3 -- LANDING (Seaplane lands at rig)
* 4 -- MS (Lara hitchhikes on a minisub)
* 5 -- CRASH (Lara goes to Tibet and has a rough landing there)
* 6 -- JEEP (Lara steals it and outruns Bartoli's goons)
* 7 -- END (Lara escaping the collapsing lair)

.Cutscene IDs
* 0 -- CUT1 (At the end of the Great Wall)
* 1 -- CUT2 (Lara the stowaway)
* 2 -- CUT3 (Bartoli vs. goon)
* 3 -- CUT4 (Bartoli stabs himself)

.Soundtrack IDs
* 0 -- BLANK (no sound)
* 3 -- CUT1 (``at the fancy door'' soundtrack)
* 4 -- CUT2 (``Lara the stowaway'' soundtrack)
* 5 -- CUT3 (``Bartoli vs. goon'' soundtrack)
* 30 -- CUT4 (``Bartoli stabs himself'' soundtrack)
* 31 -- DERELICT (eerie choppy/echo-y synths)
* 32 -- WATER (dripping/pouring water sounds)
* 33 -- WIND (Blowing wind)
* 34 -- HEARTBT (musical embellishment of one)
* 52 -- SHOWER (that infamous shower scene)
* 58 -- MACHINES (in the offshore rig)
* 59 -- FLOATING (wispy synths)

Other Script Commands
~~~~~~~~~~~~~~~~~~~~~~

`FirstOption`, `TitleReplace`, `OnDeathDemoMode`, `OnDeathInGame`, `OnDemoInterrupt` and `OnDemoEnd` can also be setup to perform specific actions. For example,  `OnDeathInGame` will be set
to "0x500" which loads the title screen when Lara dies in-game.

.Commands
* *Level* / *Sequence* + operand -- `0x000` -- Load specified *script sequence* (0 means Frontend, 1 means Gym, 2 means first level)
* *Demo* + operand -- `0x400` -- Load specified demo level
* *ExitToTitle* -- `0x500` -- Exit to Title Screen
* *ExitGame* -- `0x700` -- Exit entire game?
* *TitleDeselect* -- `0x900` -- Unknown
