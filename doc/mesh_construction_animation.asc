Mesh Construction and Animation
-------------------------------

Overview
~~~~~~~~

The animated mesh objects in the Tomb Raider series are sets of meshes that are moved relative to each other, as defined by `Moveables[]` entries. Each entry
describes which meshes to be used (a contiguous set of them referred to in `MeshPointers[]`), what hierarchy and relative offsets they have (contents of
`MeshTree[]` pointed to), and what animations are to be used (contents of `Animations[]` pointed to).

The hierarchy used is a branching one, with the meshes being at the nodes, and with the first mesh being the root node. The `MeshTree[]` values, called
``Bone2'' in some documentation, are applied to each of the child meshes in sequence; they are sets of four `int32_t`'s, the first being a hierarchy operator,
and the remaining three being the coordinates in the parent mesh's system. A hierarchy example is that for the Lara meshes:

[width="70%",cols="^",frame="none",align="center"]
|====
| image:illustrations/meshtree.png[title="Lara's MeshTree",width=450,height=446]
| 'Top-down hierarchy of Lara's MeshTree. Hips is a root mesh. Ponytail is not listed, as it is a separate object.'
|====

This is implemented by using a stack of meshes and ``push'' and ``pop'' operations in `MeshTree[]`. Normally, each mesh's parent is the previous mesh in series.
But such meshes can be ``remembered'' by adding them to a stack of meshes with a ``push'' operation. This remembered mesh can then be used as the parent mesh
with a ``pop'' operation. It is not clear what the maximum stack depth is; most TR mesh stacks do not extend beyond 2 or 3 meshes.

The animations for each mesh object are selected with some ingenious techniques. Which animations to use are not hardcoded; instead, each entity has some states
it can be in, and these states are used to select which animation. For example, locks have only one state (they just sit there), doors have two states (open and
closed), and Lara has numerous states, such as standing, walking, running, jumping, falling, being hurt, dying, etc. Each animation has a state ID, which can be
used to select it; however, state transitions might seem to require a large number of intermediate states (opening, closing, starting to jump, landing, etc.).
The alternative used in the Tomb Raider engine is for each animation to have bridge animations to other states' animations, which are selected using the ID of
which state to change to. These bridge animations then lead to the animation with the appropriate state. Thus, a closed door will run a looped closed-door
animation as long as its state stays ``closed'', but when its state becomes ``open'', it will change to an opening-door bridge animation, which will end in a
looped open-door animation. Likewise, closing a door will make it use a closing-door bridge animation. Some bridge animations are chosen with a finer grain of
selectivity, however, such as using one for left foot forward and one for right foot forward.

Thus, each animation references a set of `StateChange` structures (called simply a ``structure'' in some documentation), each one of which references an
`AnimDispatch` structure (called a ``range'' in some documentation). Each `StateChange` structure contains a new state and which `AnimDispatch` structures to
use. When an entity goes into a new state, the `StateChange` structures are scanned for that state's ID, and if one matches, then that `StateChange`'s
`AnimDispatch` es are then scanned for a range of frames that contains the ID of the current frame. If such an `AnimDispatch` is found, the animation and the
frame are changed to those listed in it.

The ultimate unit of animation is, of course, the frame, and each frame consists of a bounding box, the offset of the root mesh, and rotation angles for all the
meshes with respect to their parent meshes. The root mesh is also rotated, but relative to the object's overall coordinates. All rotations are performed around
the meshes' origins, and are in order Y, X, Z (yaw, pitch, roll). The reason for the root mesh's displacement is because entities traveling on solid surfaces
are likely tracked by having their locations be at ground level, and Lara's hips, for example, are well above the ground. Finally, some of the angles are not
specified explicitly, when they are not, they are zero.

Frames are referenced in two ways, either by an offset into the `Frames[]` array that contains them, or by frame index. The values of the latter appear to be
unique to each kind of entity, but not between entities; the first frame for each kind is numbered 0. This is likely a convenience when constructing the
animations, since the list of animation frames for each entity can be constructed separately. However, using these indices is fairly simple. Each Animation
structure has a first-frame index; this index is subtracted from the index of the desired frame in order to find out its index relative to the animation's first
frame.

There are also some special AnimCommands (called ``Bone1'' in some documentation) for doing various additional things. Some of them are for setting reference
points; these may either be 3D ones, for example for grab locations, or 2D ones, for jumps from surface. Some others define actions per frame, like playing
sounds, emitting bubbles, and so forth.

Finally, some entities appear to have very incomplete animations; their complete animations are ``borrowed'' from similar entities. One example of this is the
various goons in TR2's Venice levels -- some of them have a full set of animations, while some others have only the standing animation. The ones with only the
standing animation borrow their other animations from the fully-animated ones.

Data Structures
~~~~~~~~~~~~~~~

Mesh Tree structure
^^^^^^^^^^^^^^^^^^^

[source,cpp]
----
struct tr_meshtree_node // 4 bytes
{
    uint32_t Flags;
     int32_t Offset_X;
     int32_t Offset_Y;
     int32_t Offset_Z;
};
----

`MeshTree[]` array consists of meshtree nodes.

In `Flags` field, two bytes are used:
* Bit 0 (`0x0001`) indicates '``take the top mesh off of the mesh stack and use as the parent mesh'' when set', otherwise '``use the previous mesh as the parent mesh'''.
* Bit 1 (`0x0002`) indicates ``put the parent mesh on the mesh stack''.

When both bits are set, the 'Bit 0' operation is always done before the 'Bit 1' operation. In effect, 'read the stack but do not change it'.

`Offset_X`, `Offset_Y` and `Offset_Z` are offsets of the mesh's origin from the parent mesh's origin.

Animation structure
^^^^^^^^^^^^^^^^^^^

This describes each individual animation. These may be looped by specifying the next animation to be itself. In TR2 and TR3, one must be careful when parsing
frames using the FrameSize value as the size of each frame, since an animation's frame range may extend into the next animation's frame range, and that may have
a different FrameSize value.

[source,cpp]
----
struct tr_animation // 32 bytes
{
    uint32_t  FrameOffset; // B
    uint8_t   FrameRate;   // Engine ticks per frame
    uint8_t   FrameSize;   // Number of int16_t's in Frames[] used by this animation

    uint16_t  State_ID;

    mix_float Speed;
    mix_float Accel;

    uint16_t  FrameStart; // first frame in this animation
    uint16_t  FrameEnd; // last frame in this animation (numframes = (End - Start) + 1)
    uint16_t  NextAnimation;
    uint16_t  NextFrame;

    uint16_t  NumStateChanges;
    uint16_t  StateChangeOffset; // offset into StateChanges[]

    uint16_t  NumAnimCommands; // How many of them to use.
    uint16_t  AnimCommand; // offset into AnimCommand[]
};
----

`FrameOffset` is a byte offset into Frames[] (divide by 2 for Frames[i]).

For TR4 and TR5, extended version of `tr_animation` is used:

[source,cpp]
----
struct tr4_animation // 32 bytes
{
    uint32_t  FrameOffset; // Byte offset into Frames[] (divide by 2 for Frames[i])
    uint8_t   FrameRate;   // Engine ticks per frame
    uint8_t   FrameSize;   // Number of int16_t's in Frames[] used by this animation

    uint16_t  State_ID;

    mix_float Speed;
    mix_float Accel;
    mix_float SpeedLateral;
    mix_float AccelLateral;

    uint16_t  FrameStart; // first frame in this animation
    uint16_t  FrameEnd;   // last frame in this animation (numframes = (End - Start) + 1)
    uint16_t  NextAnimation;
    uint16_t  NextFrame;

    uint16_t  NumStateChanges;
    uint16_t  StateChangeOffset; // offset into StateChanges[]

    uint16_t  NumAnimCommands; // How many of them to use.
    uint16_t  AnimCommand;     // offset into AnimCommand[]
};
----

{TR4} {TR5} In addition to `Speed` and `Accel` values, TR4 introduced `LateralSpeed` and `LateralAccel` values, which are used to move entity to the sides,
rather than forward or backward. However, these values are only used for 'any entity but Lara' -- engine ignores them in such case.

Lateral speed and acceleration primarily used for ``start-up'' animations of NPCs -- for example, armed baddies in TR4 can roll or jump aside.

State Change structure
^^^^^^^^^^^^^^^^^^^^^^

Each state change entry contains the state to change to and which animation dispatches to use; there may be more than one, with each separate one covering a
different range of frames.

[source,cpp]
----
struct tr2_state_change // 6 bytes
{
    uint16_t StateID;
    uint16_t NumAnimDispatches; // number of ranges (seems to always be 1..5)
    uint16_t AnimDispatch;      // Offset into AnimDispatches[]
};
----

Animation Dispatch structure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This specifies the next animation and frame to use; these are associated with some range of frames. This makes possible such specificity as one animation for
left foot forward and another animation for right foot forward.

[source,cpp]
----
struct tr2_anim_dispatch    // 8 bytes
{
    int16_t Low;           // Lowest frame that uses this range
    int16_t High;          // Highest frame (+1?) that uses this range
    int16_t NextAnimation; // Animation to dispatch to
    int16_t NextFrame;     // Frame offset to dispatch to
};
----

AnimCommand structure
^^^^^^^^^^^^^^^^^^^^^

These are various commands associated with each animation. They are varying numbers of `int16_t`s packed into an array. As the 'FloorData', AnimCommands must be
parsed sequentially, one by one.

The first AnimCommand entry is the 'type', which determines how operand int16_t's follow it. Some of them refer to the whole animation (jump and grab points,
etc.), while others of them are associated with specific frames (sound, bubbles, etc.).

[source,cpp]
----
struct tr2_anim_command // 2 bytes
{
    int16_t Value;
};
----

Here are all the `AnimCommand` types and their arguments.

* 1 -- *Set Position* (3 arguments). Sets relative entity position (x, y, z); found in grab and block-move animations.
* 2 -- *Jump Distance* (2 arguments). Vertical and horizontal speed for jumping.
* 3 -- *Empty Hands* (No arguments). This command is performed in the end of animation of Lara pulling a switch, inserting a key, grabbing a pushable block, and so on. It is needed because engine ``locks'' Lara's ability to draw weapons or ignite a flare when such action is performed, and only way to unlock it is to call this command.
* 4 -- *Kill* (No arguments). Kill entity. This effectively disables entity and removes it from the world.
* 5 -- *Play Sound* (2 arguments). The first argument is a frame number, and the second one is the ID of the sound to play at that frame (internal sound index).
+
--
{TR2}{TR3}{TR4}{TR5} Besides Sound ID, second argument may contain two ``packed'' bit flags. Their meanings are:
--
** `0x4000` -- play this sound when on dry land (example: footsteps)
** `0x8000` -- play this sound when in water (example: running through shallow water)
* 6 -- *Effect* (2 operands). The first one is a frame number, and the second one is effect number. Note that 'effect' here is the very same kind of effect used in 'trigger action' with the same name. Effect meaning will be listed separately.

Frame structure
^^^^^^^^^^^^^^^
Frames indicate how composite meshes are positioned and rotated. They work in conjunction with Animations[] and MeshTree[]. A given frame has the following
format:

[source,cpp]
----
struct tr_anim_frame    // Variable size
{
     int16_t BB1x, BB1y, BB1z; // bounding box (low)
     int16_t BB2x, BB2y, BB2z; // bounding box (high)
     int16_t OffsetX, OffsetY, OffsetZ; // starting offset for this moveable
     int16_t NumValues;   // TR1 ONLY: number of angle sets to follow; these start with the first mesh, and meshes without angles get zero angles.)
                         // (TR2/3: NumValues is implicitly NumMeshes (from moveable))

    uint16_t AngleSets[];   // Variable size
}
----

`AngleSets` are sets of rotation angles for all the meshes with respect to their parent meshes. In TR2/3, an angle set can specify either one or three axes of
rotation.

If either of the high two bits (`0xC000`) of the first angle `uint16_t` are set, it's one axis: only one `uint16_t`, low 10 bits (`0x03FF`), scale is `0x0100` --
90 degrees; the high two bits are interpreted as follows: `0x4000` -- X only, `0x8000` -- Y only, `0xC000` -- Z only.

If neither of the high bits are set, it's a three-axis rotation. The next 10 bits (`0x3FF0`) are the X rotation, the next 10 (including the following
`uint16_t`) (`0x000F`, `0xFC00`) are the Y rotation, the next 10 (`0x03FF`) are the Z rotation, same scale as before (`0x0100` -- 90 degrees).

Rotations are performed in Y, X, Z order.

{TR1} All angle sets are two words and interpreted like the two-word sets in TR2/3, 'except' that the word order is reversed.
