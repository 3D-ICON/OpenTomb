[[non-player-character-behaviour]]
Non-Player Character Behaviour
------------------------------

Overview
~~~~~~~~

All the Tomb Raider game physics and entity behavior appears to be hardcoded, with each type ID being associated with some specific sort of behavior (as Lara,
as a boat, as a tiger, as a door, as a boulder, as a lock, etc.). There is no sign of the sorts of schemes used by some other game engines for specifying this
behavior in data files. One scheme is to use generic characters, generic projectiles, and so forth, and to specialize them by reading in appropriate records
from data files. Another scheme is to use interpreted pseudocode; this is used by id's Quake. This hardcoding makes it difficult to port the earlier Tomb Raider
scenarios to the engines of the later games, which could be desirable with their improved 3D-card and sound-card support. While textures, models, and animations
can be ported, behavior cannot be.

However, there is a hint that TR3 may have some such information. Some of its characters are hostile in some levels, and not in others (the India-level monkeys,
the Antarctica-level flamethrower wielders); there may be some flag in `Items[]` that determines whether a character is hostile or not. But the hostile and
non-hostile versions of these characters may have separate type IDs.

Despite that lack, the Tomb Raider series does have navigation hints for the Non-Player Characters; those entities that move freely across the maps under the
command of the game AI. One of the NPCs is the camera, since only Lara (and the vehicles she rides) is under the direct control of the player; the game AI
makes the camera follow Lara. The camera uses the navigation hints used by the flying NPC's; these can be constructed so as to help the camera out of tight
spots.

The navigation hints are three data structures: boxes, overlaps, and zones. Most sectors point to some box, the main exceptions being horizontal-portal sectors.
Several neighbring sectors may point to the same box. A box is a horizontal rectangle, with corners and height specified; each box also has a pointer into the
list of overlaps. Each segment in that list is the list of accessible neighboring boxes for some box; the NPCs apparently select from this list to decide where
to go next. This selection is done with the help of the zones. These structures of [red]#6 (TR1)# or 10 (TR2, TR3) `int16_t`'s that act as zone IDs;
their overall indexing is the same as the boxes, meaning that each box will have an associated set of zone IDs. An NPC will select one of this set to use, and
will prefer to go into the overlaps-list boxes that have the same zone value as the box it is currently in. For example, one can create guard paths by making
chains of zone-ID-sharing boxes, with their overlaps pointing to the next boxes in those chains.

Data Structures
~~~~~~~~~~~~~~~

[[Boxes]]
Boxes
^^^^^

[source,cpp]
----
struct tr2_box
{
    // 8 bytes [TR1: 20 bytes] In TR1, the first four are int32_t's instead of uint8_t's, and are not scaled.
    uint8_t Zmin;     // sectors (* 1024 units)
    uint8_t Zmax;
    uint8_t Xmin;
    uint8_t Xmax;
    int16_t TrueFloor; // Y value (no scaling)
    int16_t OverlapIndex; // index into Overlaps[]. The high bit is sometimes set; this
                        // occurs in front of swinging doors and the like.
};
----

Overlaps
^^^^^^^^

This is a set of lists of neighboring boxes for each box, each member being a `uint16_t`; the highest bit being set marks the end of each list. NPCs apparently
use this list to decide where to go next.

Zones
^^^^^

This is a set of `int16_t`'s, [red]#6 for TR1# and 10 for TR2 and TR3. NPCs prefer to travel to a box with the same zone ID as the one they are currently at.
Which of these zone IDs it uses depends on the kind of the NPC and its current state. The first half of the Zones structure is for the ``normal'' room state,
and the second half is for the ``alternate'' room state. TR1, for example, has 2 sets of ground zones and 1 set of fly zones; its zones are

1. ground zone 1 (normal)
2. ground zone 2 (normal)
3. fly zone (normal)
4. ground zone 1 (alternate)
5. ground zone 2 (alternate)
6. fly zone (alternate)

The ground zones are for NPCs that travel on the ground, while the fly zones are for flying or swimming NPCs. TR2 and TR3 have similar breakdowns, though they
have 4 ground zones.
