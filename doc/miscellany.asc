Miscellany
----------

These are various odds and ends that do not fit into the earlier categories.

Version
~~~~~~~

Every level file begins with a `uint32_t` version number.  This seems to be used by the engine to guarantee compatibility between various level editor versions
and the game engine version.  More generally, it can be used to determine what sort of level is being read.

Here are the known (observed) values for the version header:

* `0x00000020` -- Tomb Raider 1, Gold, Unfinished Business
* `0x0000002D` -- Tomb Raider 2
* `0xFF080038` -- Tomb Raider 3
* `0xFF180038` -- Tomb Raider 3
* `0x00345254` -- Tomb Raider 4 and Tomb Raider 5
* `0x63345254` -- Tomb Raider 4 (demo versions)

NOTE: Early TR4 demos (e.g. 'September 15 demo') have whole level files as a single packed zlib chunk. Therefore, there is no header.

NOTE: TR5 version header is equal to TR4 version header.  So there is no way to tell TR4 level from TR5 level judging only by this header -- you need to check
filename extension as well.

NOTE: As it was noted, 'retail' version of TR4 expects to load sound samples compressed in MS-ADPCM format, while 'TRLE' version of TR4 loads uncompressed
samples only. There is no way to tell 'retail' version from 'TRLE' version, as their version numbers are equal.

Palette
~~~~~~~

This consists of 256 <<tr_colour>> structs, one for each palette entry. However, the individual colour values range from 0 to 63; they must be multiplied by 4
to get the correct values.

This used for all 8-bit colour, such as 8-bit textures.

Object Textures
~~~~~~~~~~~~~~~

Object-texture vertex structure. It specifies a vertex location in textile coordinates. The Xpixel and Ypixel are the actual coordinates of the vertex's pixel.
The Xcoordinate and Ycoordinate values depend on where the other vertices are in the object texture. And if the object texture is used to specify a triangle,
then the fourth vertex's values will all be zero.

[source,cpp]
----
struct tr2_object_texture_vert
{
    // 4 bytes
    uint8_t Xcoordinate; // 1 if Xpixel is the low value, 255 if Xpixel is the high value in the object texture
    uint8_t Xpixel;
    uint8_t Ycoordinate; // 1 if Ypixel is the low value, 255 if Ypixel is the high value in the object texture
    uint8_t Ypixel;
};
----

[[tr2_object_texture]]

Object texture structure. These, thee contents of ObjectTextures[], are used for specifying texture mapping for the world geometry and for mesh objects.

[source,cpp]
----
struct tr2_object_texture
{
    // 20 bytes
    uint16_t Attribute;  // 0 means that a texture is all-opaque, and that transparency
                       // information is ignored.
                       // 1 means that transparency information is used. In 8-bit colour,
                       // index 0 is the transparent colour, while in 16-bit colour, the
                       // top bit (0x8000) is the alpha channel (1 = opaque, 0 = transparent).
                       // 2 (only in TR3) means that the opacity (alpha) is equal to the intensity;
                       // the brighter the colour, the more opaque it is. The intensity is probably calculated
                       // as the maximum of the individual color values.
    uint16_t Tile; // index into textile list
    tr2_object_texture_vert Vertices[4]; // the four corners of the texture
};
----

Animated Textures
~~~~~~~~~~~~~~~~~

Animated textures describe sets of object textures that are cycled through to produce texture animations; they are a set of int16_t's with the following format
(not a ``real'' C/C++ structure):

[source,cpp]
----
int16_t NumAnimatedTextures
virtual struct
{
    int16_t NumTextureIDs; // Actually, this is the number of texture ID's - 1.
    int16_t TextureIDs[NumTextureIDs + 1]; // offsets into ObjectTextures[], in animation order.
} AnimatedTextures[NumAnimatedTextures];
----

If a texture belongs to an animated-texture group, it will automatically be animated by the engine.

There are two types of animated textures -- 'classic frames' and 'UVRotate':

* *Classic frames:* These are ordinary animated textures, and the only type displayed prior to TR4. It is simply a list of textures that are cycled through in
  an endless loop; they are normally used as geographic elements of the levels (e.g. water surface, bubbling lava, Atlantean flesh walls), but practically, Tomb
  Raider engines are capable of applying animated textures to mesh geometry (this feature is primarily used in custom levels). The speed (interval) of animation
  is hardcoded, and varies from version to version. While in TR1-2 textures were animated relatively slowly, in TR3 onwards they were sped up.
* *UV Rotate:* Beginning from TR4, there is a new scheme for animated textures, called 'UVRotate'. According to its name, it continuously shifts vertical
  texture coordinate while preserving texture size, which creates an effect of moving texture. For example, you can see it in action in TR4's `angkor1.tr4`,
  room #76:

[width="70%",cols="^",frame="none",align="center"]
|====
| image:illustrations/uvrotate.jpg[title="UVRotate texture animation in action"]
| In foreground, you can see alpha-blended waterfall object animated with UVRotate.
  In background, UVRotate animation is also applied to room mesh.
|====

UVRotate mode is engaged by specifying `UVRotate` command in level script entry, which takes rotation speed as an argument. If such command is found (and
argument is not zero -- for example, `UVRotate = 4`), engine uses special variable value kept in level file, `animated_textures_uv_count`, to determine if
animation range belongs to UVRotate mode or classic frames mode. Then, if it belongs to UVRotate mode, each frame of this range is treated as individual
rotating texture.

[NOTE]
====
There is also special case when UVRotate texture mode is engaged. When a texture is applied to a model with specific ID (so-called 'waterfall objects'), then it
is also considered UVRotate animated texture, even if it doesn't belong to animated texture range, 'but only if it is a texture applied to a first face in the
first mesh of the model'. If there are other textures applied to other faces of a waterfall object, they won't be considered as UVRotate.

The speed of animation for waterfall objects is not affected by `UVRotate` script command. Instead, it is hardcoded value of 7.
====

Cameras and sinks
~~~~~~~~~~~~~~~~~

This data block serves for two different purposes, albeit keeping the same structure for both. First purpose is to provide positions to switch the camera to
using 'Camera' trigger action, and the second purpose is to 'move Lara to specified position' when she is underwater, and 'Underwater Current' trigger action
was used.

[source,cpp]
----
struct tr_camera
{
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t Room;
    uint16_t Flag;
};
----

`X`, `Y` and `Z` values are coordinates of a given camera or sink. When used with camera, it is an origin point of a camera. When used with sink, it is a point,
towards which Lara is pushed.

`Room` value specifies the room where camera is placed. For 'sink' cases, this value is used to define `strength of the current' which moves Lara underwater.

`Flag` value is unknown for both cameras and sinks. However, there is some info that `Flag` is re-used for sinks as a `Zone[]` reference.

Flyby Cameras
~~~~~~~~~~~~~

[source,cpp]
----
struct tr_flyby_camera
{
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t dx;
    int32_t dy;
    int32_t dz;

    uint8_t Sequence;
    uint8_t Index;

   uint16_t FOV;
   uint16_t Roll;
   uint16_t Timer;
   uint16_t Speed;
   uint16_t Flags;

   uint16_t Room_ID;
};
----


Cinematic Frames
~~~~~~~~~~~~~~~~

These are camera positionings for cutscenes. All the entity animations are specified separately, and it is not clear where there is any syncing between these
frames and any of the animations.

[source,cpp]
----
struct tr2_cinematic_frame
{
    int16_t rotY;   // rotation about Y axis, +/- 32767 == +/- 180 degrees
    int16_t rotZ;   // rotation about Z axis, +/- 32767 == +/- 180 degrees
    int16_t rotZ2;  // seems to work a lot like rotZ;  I haven't yet been able to
                  // differentiate them
    int16_t posZ;   // camera position relative to something (target? Lara? room
                  // origin?).  pos* are _not_ in world coordinates.
    int16_t posY;   // camera position relative to something (see posZ)
    int16_t posX;   // camera position relative to something (see posZ)
    int16_t unknown; // changing this can cause a runtime error
    int16_t rotX;   // rotation about X axis, +/- 32767 == +/- 180 degrees
};
----


LightMap
~~~~~~~~

A 32*256 array of `uint8_t` which is apparently for applying light to 8-bit colour, in some documentation called `ColourMap`. The current palette index and
lighting value are used to calcuate an index to this table, which is a table of palette indices.

The Tomb Raider series' software rendering, like that of most real-time-3D games, uses 8-bit colour for speed and low bulk; however, there is the serious
problem of how to do lighting with 8-bit colour, because doing it directly is computationally expensive. The usual solution is to arrange the palettes' colours
in ramps, which the engine then follows in the appropriate directions. However, the TR series' palettes generally lack such neat ramps.

But the TR series has a more general solution, one that does not require palettes to have colour ramps. It uses precalculated lighting tables, the `ColourMap`
objects. These contain translations of a colour value and a lighting value, listed by palette index. The translation goes as follows:

`n = ColourMap[256 * k + i];`

where `i` is the original palette index, `k` is determined from the lighting value, and `n` is the new palette index. The lighting index `k` varies from 0 to
31, and the corresponding lighting value is, [red]#for TR1#,

`2 - k / 16`

and for TR2 and TR3,

`2 - (k + 1) / 16`

This may be associated with the curious fact of the lighting values in the data files increasing in the ``wrong'' direction in TR1 and TR2, with 0 being full
brightness and greater values being darker.
